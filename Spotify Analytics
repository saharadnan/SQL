#For this project, I downloaded Spotify data from Kaggle.
#Then I created a table to insert Spotify data into and performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
);

#Then I inserted the Spotify Data .csv into the table and explored the data using the following SQL. 
#Determined the average popularity, danceability, and energy by artist and track. 
SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

#Top 5 artists by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 5;

#Longest track by name and track
SELECT artist_name, track_name, MAX(duration_ms)
FROM BIT_DB.Spotifydata;

#Valence - The higher the value, the more positive mood for the song
#Using CASE to categorize the tracks by valence
SELECT artist_name, track_name, valence,
    CASE
     WHEN valence > 0.70 THEN "Party Music"
     WHEN valence > 0.50 THEN "Chill Music"
     ELSE "In your feels Music"
 END as mood
FROM BIT_DB.Spotifydata
ORDER BY mood;

